# AWS DISCLAMER
# Provided to Customer on 12 March 2020
# ---

# The following files are provided by AWS Professional Services describe the process to create an read-only breakglass role for security within your AWS Automated Landing Zone. These are non-production ready and are to be used for testing purposes.

# These files is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
# OR CONDITIONS OF ANY KIND, either express or implied. See the License
# for the specific language governing permissions and limitations under the License.

# (c) 2019 Amazon Web Services, Inc. or its affiliates. All Rights Reserved.
# This AWS Content is provided subject to the terms of the AWS Customer Agreement available at
# http://aws.amazon.com/agreement or other written agreement between Customer and Amazon Web Services, Inc.â€‹

#apiVersion: v1
#kind: Namespace
#metadata:
#  name: dev
#---
apiVersion: v1
kind: Service
metadata:
  name: appf
  namespace: sfapp
spec:
  type: NodePort
  ports:
    - port: 80
      targetPort: 8080
  selector:
    app: appf
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: appf
  namespace: sfapp
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 2
      maxSurge: 2
  selector:
    matchLabels:
      app: appf
      k8s-app: fluentd-cloudwatch
  template:
    metadata:
      labels:
        app: appf
        k8s-app: fluentd-cloudwatch
      annotations:
        iam.amazonaws.com/role: Admin_Role 
    spec:
      volumes:
        - name: config-volume
          configMap:
            name: fluentd-config
        - name: fluentdconf
          emptyDir: {}
        - name: cloud-api-logs
          emptyDir: {}
        - name: log-scratch
          emptyDir: {}
        - name: journal-scratch
          emptyDir: {}
      serviceAccount: fluentd
      serviceAccountName: fluentd
      initContainers:
        - name: copy-fluentd-config
          image: busybox
          command: ['sh', '-c', 'cp /config-volume/..data/* /fluentd/etc']
          volumeMounts:
            - name: config-volume
              mountPath: /config-volume
            - name: fluentdconf
              mountPath: /fluentd/etc
        - name: update-log-driver
          image: busybox
          command: ['sh','-c','']
      containers:
        - name: appf
          image: dmilan/docker-sample-restapp-flask
          imagePullPolicy: IfNotPresent
          volumeMounts:
          #- mountPath: /var/log/appf
            #name: log-scratch
          - mountPath: /opt/cloud/logs
            name: cloud-api-logs
          resources:
            requests:
              cpu: 200m
              memory: 0.5Gi
            limits:
              cpu: 400m
              memory: 1Gi
          securityContext:
            privileged: false
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
          ports:
            - containerPort: 8080
        - name: fluentd
          image: fluent/fluentd-kubernetes-daemonset:v1.9.3-debian-cloudwatch-1.0
          env:
          - name: REGION
            value: us-east-1
          - name: AWS_REGION
            value: us-east-1
          - name: CLUSTER_NAME
            value: de-iot-sdbx3-fargate
          - name: CI_VERSION
            value: "k8s/1.0.1"
          resources:
            limits:
              memory: 400Mi
            requests:
              cpu: 100m
              memory: 200Mi
          volumeMounts:
          - name: config-volume
            mountPath: /config-volume
          - name: fluentdconf
            mountPath: /fluentd/etc
          - name: cloud-api-logs
            mountPath: /opt/cloud/logs
--- 
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: appff
  namespace: sfapp
  annotations:
    #alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-1:057929149431:certificate/ed6b00f2-d6ff-465e-a0ff-1f702da9f1e9 
    #alb.ingress.kubernetes.io/healthcheck-path: /health.html 
    #alb.ingress.kubernetes.io/healthcheck-protocol: HTTPS 
    #alb.ingress.kubernetes.io/backend-protocol: HTTPS
    alb.ingress.kubernetes.io/backend-protocol: HTTP
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}]'
    #alb.ingress.kubernetes.io/listen-ports: '{"HTTPS": 443}]'
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing 
    alb.ingress.kubernetes.io/target-type: ip
    #alb.ingress.kubernetes.io/security-groups: sg-08ff9b4204047bd30
    #alb.ingress.kubernetes.io/tags: Name=app-alb
    #Add subnets
    #alb.ingress.kubernetes.io/subnets: subnet-0716aafc38b82ac39, subnet-05d4e8384b82c1648, subnet-03c8405e45c7d93d8
  labels:
    app: appf
spec:
  rules:
    - http:
        paths:
          - path: /ping
            backend:
              serviceName: appf
              servicePort: 80
---
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: appf
  namespace: sfapp
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: appf
  minReplicas: 3
  maxReplicas: 6
  metrics:
  - type: Resource
    resource:
      name: cpu
      targetAverageUtilization: 50